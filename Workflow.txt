@#$ - - - - -         S        E        T        U        P        - - - - - - - $#@

// Initials <frontend mostly>
1. create project folder 
2. create frontend using vite@latest inside project folder
3. install necessary files including tailwindcss and config everything as 
   their website guideline
4. remove unnecessary files of vite like public folder, 
   from src folder delete asset app.css index.css unnecessary imports,
5. go outside frontend (project folder)
6. install necessary packages for backend and whole project
7. modify script

//backend setup
1. create major folders config,controllers,models,middleware,routes,utils
2. create main file index.js or server.js
3. try running backend from using script
4. create db.js inside config folder
5. inside db code all necessary codes for connecting server using mongoose
6. create .env outside to save gloval variables for port and database uri
7. then from index.js (backend) import path, express, cookieparser, dotenv
8. listen to port
9. create basic home route




@#$ - - - - -         U        S        E        R          - - - - - - - $#@


#       B   A   C   K   E   N   D      #

//[ route, model, controller, middleware, jwt ]
1. create basic user api in index.js and create associated route,controller,
   model for the user 
2. define user schema in userModel.js file, create instance of the model and export it
3. create asyncHandler.js in middleware folder that handles errors 
4. from userRoute use createUser call back and define it in userController.js file
5. validate user data and take action
6. encrypt user password using bcrypt(salt) and hashing in userController.js file
7. create a file in utils folder to generate jwt and export it
8. then generate token using user id and send cookie to user
9. Similarly implement login by varifying email & pass and setting new cookie
10. Also logout user by clearing cookie
11. create authentication middleware in middleware folder
12. create route for authentication of admin and return all users
13. create route for user profile and add features like updaing profile
14. Add feature(route) to get, update, delete from admin side 


#     F   R   O   N   T   E   N   D      #

//Basic folders and pages
1. inside src create components,pages,redux folder
2. inside pages folder create Admin, Auth, User folder
3. inside Auth folder create Navigation.jsx and Navigation.css file
4. modify app.jsx and main.jsx as necessary
5. add links to navigation pannel
6. redux -> api -> apiSlice.js, userApiSlice.js
7. redux -> features -> constants.js, store.js
8. creates apis in apiSlice.js
9. add endpoints at userApiSlice.js
10. add url constants in features->constants.js
11. in store.js define reducer and middleware
12. redux -> auth -> authSlice.js for authentication
13. now implement login, logout in navigation.jsx file
14. add options for users after login
15. Users->Profile.jsx implement user profile section by 
    adding get data and update data feature in users
16. Admin->AdminRoute.jsx, UserList.jsx, implement get all user 
    info, update users, delete user feature



@#$ - - - - -         C        A        T        E        G        O        R        Y        - - - - -$#@


#       B   A   C   K   E   N   D      #
1. in index.js use category route for category path
2. Route->categoryRoute.js define category route
3. model->categoryModel.js define category schema and export
4. controllers->categoryController.js define all controllers
   ( get all, specific, add, update, delete) for routes


#     F   R   O   N   T   E   N   D      #
1. src->pages->Admin->CategoryList.jsx
2. import CategoryList to main.jsx to render it
3. redux->api->categoryApiSlice.js and config all routes here
4. create category url const in redux->constants.js file
5. components->CategoryForm.jsx , Modal.jsx to insert/update/delete catagory




@#$ - - - - -         P        R        O        D        U        C        T        - - - - -$#@


#       B   A   C   K   E   N   D      #

1. similar as before create product model,controller,route and 
   main route to index file
2. middleware->checkId.js 
3. also provide route for image upload and create a uploadRoute for it.
4. create a uploads folder besides frontend and backend where images will be stored


#     F   R   O   N   T   E   N   D      #

//Admin 
1. redux->api->productApiSlice.js
2. add product url to constants
3. pages->admin->AddProduct.jsx create a form to take all info regarding
   creating a Product and upload image
4. import and render it to main.jsx
5. pages->admin->ProductUpdate.jsx to update existing product info
6. render it from main.jsx
7. pages->admin->AdminMenu.jsx provise extra features for Admin 
8. pages->admin->AllProducts.jsx show all products and render it to main.jsx

//user
1. components->Header.jsx 
2. Pages->products to set up all pages related to product
3. src->pages->Home.jsx
4. Add home to main.jsx
5. components->Header.jsx for loading top rated products
6. products->SmallProduct.jsx is to show top products in Home and also related product in ProductDetails page
7. products->HeartIcon.jsx to handle favourite selection by user
8. products->Favourites.jsx to show favoutite products selected by user
9. redux->features->favourites->favoriteSlice.js to handle favourite selection for client locally
10. utils->localstorage.jsx to handle favoutite selection and store it locally as JSON also use store.js for it
11. products->FavouritesCount.jsx to show no of selected favourites in navigation fevorites links
12. products->ProductCarousel.jsx to show a carousal view of top products in Home page
13. products->Product.jsx to show all products bellow top products in Home page
14. products->Ratings.jsx to show ratings with stars where ever it is used
15. products->ProductDetails.jsx for providing product detail upon clicking a product
16. products->ProductTabs.jsx to Handle reviews and show related products in ProductDetails page


//cart 
1. redux->features->cart->cartSlice.js add api for cart
2. utils->cartUtils.js manipulate data related to cart
3. pages->Cart.jsx and import to main.jsx to render it
4. redux->features->shop->shopSlice.js add api for shop
5. register shopSlice in store.js
6. pages->shop.jsx define how to filter and show products
7. products->ProductCard.jsx define each product in card view

#       B   A   C   K   E   N   D      #
1. productRoutes.js add route for filtered products
2. productController.js add product filter method



@#$ - - - - -         O      R      D      E      R          &          P      A      Y      M      E      N      T      S        - - - - -$#@


#       B   A   C   K   E   N   D      #

1. orderModel.js, orderRoute.js, orderController.js to manage orders
2. add order main route to index.js
3. add sslcommerz crediantials to index.js
4. Add store id and password to env file and use it in index.js



#     F   R   O   N   T   E   N   D      #

1. src->redux->api->orderAPiSlice.js add api
2. add api url to redux->constants.js
3. pages->orders->Shipping.jsx handle product purchase
4. render shipping.jsx from main
5. components->ProgressSteps.jsx to show user how much they progressed to buy
   that product
6. pages->orders->PlaceOrder.jsx 
7. render PlaceOrder.jsx from main
8. Orders->order.jsx to handle ordersummery and initiate payment gateway
9. user->UserOrder.jsx to show user their orders
10. pages->Admin->OrderList to show admin all orders
11. Admin->AdminDashboard to show stats to admin




## F I N I S H I N G ##
Made a few changes on theme, updated README.md incase someone wants to try my project.
Fixed few small bugs